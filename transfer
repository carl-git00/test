import geopandas as gpd
import pandas as pd
import psycopg2
import sqlalchemy as db

from sqlalchemy import inspect, text

import os
from dotenv import load_dotenv, find_dotenv
load_dotenv(find_dotenv())

path = os.getcwd()
path = os.path.dirname(path)
path_result_file = os.path.join(path, 'results', '2025-08-20_PV_2022_LK_v01.xlsx')


dbname = 'geodb'
db_user = os.environ.get('db_username')
#db_password = os.environ.get('db_password')
host = 'gwi-geodb-02'
port = '5432'

GEODB_engine = db.create_engine(f"postgresql://{db_user}:{os.environ.get('db_password')}@GWI-GEODB-02:{port}/{dbname}")

# Get Data from Marktstammdaten (Stand 07_2024)
sql = text("""
    SELECT "Inbetriebnahmedatum","DatumEndgueltigeStilllegung","Gemeindeschluessel", "Bruttoleistung", 
        "Nettonennleistung", "Einspeisungsart", "Hauptausrichtung", ST_AsText(geometry) AS geom
    FROM "mstr_07_2024"."einheitensolar"   
""")

df_pv_mstr = pd.read_sql(sql, GEODB_engine)

sql_nuts = """SELECT "id", "ags", "gen", "bez", "nuts", geom FROM "proj_regioplan"."vg250_krs_2024" WHERE "gf" = 4 """
gdf_nuts = gpd.read_postgis(sql_nuts, GEODB_engine, geom_col="geom")


# conn = psycopg2.connect(dbname="geodb", user=username, password=pw, host="gwi-geodb-02", port=5432)
# cursor = conn.cursor()
# cursor.execute(f'SELECT "Inbetriebnahmedatum", "Bruttoleistung", "Nettonennleistung", "Einspeisungsart", "Hauptausrichtung", ST_AsText(geometry) AS geom FROM "mstr_07_2024"."einheitensolar" WHERE "Gemeinde" = \'Hattingen\'')
# data = cursor.fetchall()
# column_names = [desc[0] for desc in cursor.description]
# cursor.close()
# conn.close()
# df_mstr = pd.DataFrame(data, columns=column_names)
# df_mstr['Bruttoertrag'] = df_mstr['Bruttoleistung'] * slope.round(2)

df_pv_mstr["Inbetriebnahmedatum"] = pd.to_datetime(df_pv_mstr["Inbetriebnahmedatum"], errors ="coerce")
df_pv_mstr["DatumEndgueltigeStilllegung"] = pd.to_datetime(df_pv_mstr["DatumEndgueltigeStilllegung"], errors="coerce")

max_ibn_date = "2022-12-31"
max_shutdown_date = "2022-01-01"
df_pv_2022 = df_pv_mstr[(df_pv_mstr["Inbetriebnahmedatum"] <= max_ibn_date) &
                        (df_pv_mstr["DatumEndgueltigeStilllegung"].isna() |
                         (df_pv_mstr["DatumEndgueltigeStilllegung"] >=max_shutdown_date))].copy()
df_pv_2022["Gemeindeschluessel"] = pd.to_numeric(df_pv_2022["Gemeindeschluessel"], errors="coerce")
nan_rows = df_pv_2022[df_pv_2022["Gemeindeschluessel"].isna()]
df_pv_2022 = df_pv_2022.dropna(subset=["Gemeindeschluessel"]).copy()
df_pv_2022['AGS_Kreis'] = (df_pv_2022['Gemeindeschluessel'].astype(int) // 1000)
# changes due to changes in definition of ags
df_pv_2022['AGS_Kreis'] = df_pv_2022['AGS_Kreis'].replace(3152, 3159)
df_pv_2022['AGS_Kreis'] = df_pv_2022['AGS_Kreis'].replace(3156, 3159)
df_pv_2022['AGS_Kreis'] = df_pv_2022['AGS_Kreis'].replace(16056, 16063)
df_pv_2022_grouped = df_pv_2022.groupby("AGS_Kreis")[["Bruttoleistung", "Nettonennleistung"]].sum().reset_index()

gdf_nuts['AGS_int'] = gdf_nuts['ags'].astype(int)

gdf_merged = gdf_nuts.merge(df_pv_2022_grouped, left_on='AGS_int', right_on='AGS_Kreis', how='outer')
missing_ags = gdf_merged[gdf_merged['ags'].isna()]
missing_value_in_ags = gdf_merged[gdf_merged['Bruttoleistung'].isna()]

print("Anzahl installierter Anlagen nach Mstr:", len(df_pv_mstr))
print("Anzahl installierter Anlagen nach Mstr 2022:", len(df_pv_2022))
print("Installierte Gesamt-Bruttoleistung nach MStr:  ", df_pv_mstr['Bruttoleistung'].sum().round(), "[kW]")
print("Installierte Gesamt-Bruttoleistung nach MStr 2022:  ", df_pv_2022['Bruttoleistung'].sum().round(), "[kW]")
print("Installierte Gesamt-Bruttoleistung nach MStr 2022:  ", df_pv_2022_grouped['Bruttoleistung'].sum().round(), "[kW]")
print("Installierte Gesamt-Bruttoleistung nach MStr 2022:  ", gdf_merged['Bruttoleistung'].sum().round(), "[kW]")
# print("Gesamt-Bruttoertrag nach MStr:  ", df_mstr['Bruttoertrag'].sum().round(-4) / 10**6, "[GWh/a]")

gdf_merged = gdf_merged.drop(columns=["AGS_int", "AGS_Kreis"])

df_pv_final = pd.DataFrame(gdf_merged.drop(columns='geom'))
df_pv_final.to_excel(path_result_file, index=False)

filename = "pv_inst_cap_kw_2022_nuts3"

gdf_merged.to_postgis(name=filename, schema='proj_regioplan', con=GEODB_engine, if_exists='replace')
